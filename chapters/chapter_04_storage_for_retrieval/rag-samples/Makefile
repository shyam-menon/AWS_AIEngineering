# Makefile for RAG Demo - AWS AI Engineering Course
# Chapter 4: Storage for Retrieval
#
# This Makefile provides convenient targets for managing the RAG demo
# environment and running different components.

.PHONY: help setup up down demo-local demo-kb agent test clean install-deps validate

# Load environment variables if .env exists
ifneq (,$(wildcard .env))
    include .env
    export
endif

# Default target
help:
	@echo "ü§ñ RAG Demo - AWS AI Engineering Course"
	@echo "========================================"
	@echo ""
	@echo "üìã Available targets:"
	@echo ""
	@echo "üîß Setup and Environment:"
	@echo "  install-deps    Install Python dependencies"
	@echo "  setup          Install dependencies and validate environment"
	@echo "  validate       Validate AWS configuration and connectivity"
	@echo ""
	@echo "‚òÅÔ∏è  AWS Infrastructure:"
	@echo "  up             Create AWS Knowledge Base infrastructure"
	@echo "  down           Destroy AWS infrastructure (stops charges)"
	@echo "  status         Check Knowledge Base status"
	@echo ""
	@echo "üéØ Demo Modes:"
	@echo "  demo-local     Run local FAISS RAG demo"
	@echo "  demo-kb        Run Bedrock Knowledge Base demo"
	@echo "  agent          Run Strands agent wrapper demo"
	@echo "  compare        Compare both approaches side-by-side"
	@echo ""
	@echo "üöÄ Quick Workflows:"
	@echo "  run-kb-ephemeral   Create KB, run demo, then destroy (full cycle)"
	@echo "  local-only         Build and run local FAISS demo only"
	@echo ""
	@echo "üß™ Testing and Maintenance:"
	@echo "  test           Run test suite"
	@echo "  clean          Clean up local files and indexes"
	@echo "  rebuild-local  Force rebuild of local FAISS index"
	@echo ""
	@echo "üìñ Documentation:"
	@echo "  docs           Open README.md for detailed instructions"
	@echo ""
	@echo "üí° Examples:"
	@echo "  make setup && make demo-local    # Quick start with local RAG"
	@echo "  make up && make demo-kb          # Test managed RAG (requires AWS)"
	@echo "  make run-kb-ephemeral           # Full demo with automatic cleanup"

# Install Python dependencies
install-deps:
	@echo "üì¶ Installing Python dependencies..."
	pip install -r requirements.txt
	@echo "‚úÖ Dependencies installed"

# Complete setup
setup: install-deps
	@echo "üîß Setting up RAG demo environment..."
	@if [ ! -f .env ]; then \
		echo "üìù Creating .env from template..."; \
		cp .env.example .env; \
		echo "‚ö†Ô∏è  Please edit .env with your AWS credentials"; \
	fi
	@$(MAKE) validate

# Validate environment
validate:
	@echo "üß™ Validating environment..."
	python -c "from common import test_bedrock_connection; test_bedrock_connection()"

# Create AWS infrastructure
up:
	@echo "üöÄ Creating AWS Knowledge Base infrastructure..."
	@if [ ! -x scripts/setup-kb.sh ]; then chmod +x scripts/setup-kb.sh; fi
	./scripts/setup-kb.sh

# Destroy AWS infrastructure
down:
	@echo "üßπ Destroying AWS infrastructure..."
	@if [ ! -x scripts/teardown-kb.sh ]; then chmod +x scripts/teardown-kb.sh; fi
	./scripts/teardown-kb.sh

# Check Knowledge Base status
status:
	@echo "üìä Checking Knowledge Base status..."
	@if [ -f .kb.env ]; then \
		source .kb.env && python rag_bedrock_kb.py --status; \
	else \
		echo "‚ùå No .kb.env found. Run 'make up' first."; \
	fi

# Run local FAISS demo
demo-local:
	@echo "üîç Running local FAISS RAG demo..."
	python rag_vector_local.py

# Run Bedrock Knowledge Base demo
demo-kb:
	@echo "üèõÔ∏è Running Bedrock Knowledge Base demo..."
	@if [ ! -f .kb.env ]; then \
		echo "‚ùå Knowledge Base not set up. Run 'make up' first."; \
		exit 1; \
	fi
	python rag_bedrock_kb.py

# Run Strands agent demo
agent:
	@echo "ü§ñ Running Strands agent demo..."
	python strands_agent.py --demo

# Compare both approaches
compare:
	@echo "üîÑ Comparing RAG approaches..."
	@echo "Testing local FAISS approach:"
	@echo "--------------------------------"
	python rag_vector_local.py --question "What is AI Engineering?"
	@echo ""
	@echo "Testing Bedrock Knowledge Base approach:"
	@echo "---------------------------------------"
	@if [ -f .kb.env ]; then \
		python rag_bedrock_kb.py --question "What is AI Engineering?"; \
	else \
		echo "‚ùå Knowledge Base not available. Run 'make up' first."; \
	fi

# Full ephemeral workflow
run-kb-ephemeral:
	@echo "üé¢ Running ephemeral Knowledge Base demo..."
	@echo "This will create AWS resources, run demo, then clean up automatically."
	@echo ""
	$(MAKE) up
	@echo ""
	@echo "üéØ Running demo with Knowledge Base..."
	$(MAKE) demo-kb
	@echo ""
	@echo "üßπ Cleaning up AWS resources..."
	$(MAKE) down
	@echo ""
	@echo "‚úÖ Ephemeral demo complete!"

# Local-only workflow
local-only:
	@echo "üè† Running local-only RAG demo..."
	$(MAKE) setup
	$(MAKE) demo-local

# Force rebuild local index
rebuild-local:
	@echo "üîÑ Rebuilding local FAISS index..."
	python rag_vector_local.py --rebuild

# Run tests
test:
	@echo "üß™ Running test suite..."
	@if [ -d tests ]; then \
		python -m pytest tests/ -v; \
	else \
		echo "‚ö†Ô∏è  No tests directory found"; \
	fi

# Clean up local files
clean:
	@echo "üßπ Cleaning up local files..."
	@rm -f faiss_index.faiss faiss_index_data.npz
	@rm -rf __pycache__ .pytest_cache
	@find . -name "*.pyc" -delete
	@echo "‚úÖ Local cleanup complete"

# Interactive demos
demo-local-interactive:
	@echo "üí¨ Starting interactive local FAISS demo..."
	python rag_vector_local.py --interactive

demo-kb-interactive:
	@echo "üí¨ Starting interactive Knowledge Base demo..."
	@if [ ! -f .kb.env ]; then \
		echo "‚ùå Knowledge Base not set up. Run 'make up' first."; \
		exit 1; \
	fi
	python rag_bedrock_kb.py --interactive

agent-interactive:
	@echo "üí¨ Starting interactive agent demo..."
	python strands_agent.py --interactive

# Development targets
dev-setup: setup
	@echo "üõ†Ô∏è  Setting up development environment..."
	pip install pytest pytest-mock black flake8
	@echo "‚úÖ Development environment ready"

format:
	@echo "üé® Formatting code..."
	black *.py
	@echo "‚úÖ Code formatted"

lint:
	@echo "üîç Linting code..."
	flake8 *.py --max-line-length=88 --ignore=E203,W503
	@echo "‚úÖ Linting complete"

# Documentation
docs:
	@echo "üìñ Opening documentation..."
	@if command -v code >/dev/null 2>&1; then \
		code README.md; \
	elif command -v open >/dev/null 2>&1; then \
		open README.md; \
	elif command -v xdg-open >/dev/null 2>&1; then \
		xdg-open README.md; \
	else \
		echo "üìÑ Please open README.md in your editor"; \
	fi

# Debug targets
debug-env:
	@echo "üîç Environment Debug Information:"
	@echo "================================="
	@echo "AWS Region: $(AWS_REGION)"
	@echo "Embed Model: $(BEDROCK_EMBED_MODEL_ID)"
	@echo "Chat Model: $(BEDROCK_CHAT_MODEL_ID)"
	@echo "KB ID: $(KB_ID)"
	@echo ""
	@echo "üìÅ Files:"
	@echo "  .env exists: $$(test -f .env && echo 'Yes' || echo 'No')"
	@echo "  .kb.env exists: $$(test -f .kb.env && echo 'Yes' || echo 'No')"
	@echo "  FAISS index exists: $$(test -f faiss_index.faiss && echo 'Yes' || echo 'No')"
	@echo ""
	@echo "üîó AWS Connectivity:"
	@aws sts get-caller-identity 2>/dev/null | head -3 || echo "‚ùå AWS credentials not configured"

# Cost estimation
cost-estimate:
	@echo "üí∞ AWS Cost Estimates for RAG Demo:"
	@echo "===================================="
	@echo ""
	@echo "üìä OpenSearch Serverless:"
	@echo "  ‚Ä¢ Base cost: ~$$0.24/OCU/hour"
	@echo "  ‚Ä¢ Minimum: 0.5 OCU = ~$$2.88/day"
	@echo "  ‚Ä¢ Demo usage: ~$$0.12-0.50/hour"
	@echo ""
	@echo "üì¶ S3 Storage:"
	@echo "  ‚Ä¢ Small docs: ~$$0.01/month"
	@echo "  ‚Ä¢ Negligible for demo"
	@echo ""
	@echo "ü§ñ Bedrock Usage:"
	@echo "  ‚Ä¢ Embeddings: ~$$0.0001/1K tokens"
	@echo "  ‚Ä¢ Chat (Nova Lite): ~$$0.0008/1K input tokens"
	@echo "  ‚Ä¢ Demo cost: ~$$0.10-0.50 total"
	@echo ""
	@echo "üí° Total estimated cost:"
	@echo "  ‚Ä¢ 1 hour demo: ~$$0.25-0.75"
	@echo "  ‚Ä¢ Full day: ~$$3-4 (if left running)"
	@echo ""
	@echo "‚ö†Ô∏è  Remember to run 'make down' when finished!"

# Troubleshooting
troubleshoot:
	@echo "üîß RAG Demo Troubleshooting:"
	@echo "============================"
	@echo ""
	@echo "üîç Common Issues:"
	@echo ""
	@echo "1. AWS Credentials:"
	@echo "   ‚Ä¢ Run: aws sts get-caller-identity"
	@echo "   ‚Ä¢ Check: ~/.aws/credentials or environment variables"
	@echo ""
	@echo "2. Model Access:"
	@echo "   ‚Ä¢ Visit: https://console.aws.amazon.com/bedrock/home#/modelaccess"
	@echo "   ‚Ä¢ Enable: Amazon Titan Embed Text v2 and Nova Lite"
	@echo ""
	@echo "3. Dependencies:"
	@echo "   ‚Ä¢ Run: make install-deps"
	@echo "   ‚Ä¢ Check: pip list | grep -E 'boto3|faiss|numpy'"
	@echo ""
	@echo "4. Region Issues:"
	@echo "   ‚Ä¢ Bedrock available regions: us-east-1, us-west-2, eu-west-1"
	@echo "   ‚Ä¢ Set AWS_REGION in .env"
	@echo ""
	@echo "5. Knowledge Base Setup:"
	@echo "   ‚Ä¢ Check: make status"
	@echo "   ‚Ä¢ Rebuild: make down && make up"
	@echo ""
	@echo "üÜò Still having issues? Check README.md for detailed troubleshooting."
